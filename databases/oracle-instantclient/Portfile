# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 96272 2012-08-06 20:55:53Z ryandesign@macports.org $

PortSystem              1.0

name                    oracle-instantclient
version                 11.2.0.3.0
revision                4
categories              databases
platforms               macosx
maintainers             ryandesign
supported_archs         x86_64
homepage                http://www.oracle.com/technetwork/database/features/instant-client/

master_sites            http://cdn.actionmoniker.com/macports

use_zip                 yes
use_parallel_build      no

description \
    Oracle database connection libraries

long_description \
    Oracle Instant Client allows you to run your applications without installing the standard Oracle client or having an ORACLE_HOME.

checksums \
    [suffix instantclient-basic-macos.x64-${version}] \
        md5     fdc6c0c5956db38dd3fe411aec5e6d66 \
        sha1    be89f24538d119df35600520d8495f6ca7d8bd58 \
    [suffix instantclient-sdk-macos.x64-${version}] \
        md5     af0deddb05c6ab25d2105d10f3967587 \
        sha1    5aab133e5c2de899ce358f410cd0f39f4726e160 \
    [suffix instantclient-sqlplus-macos.x64-${version}] \
        md5     348154016e576458e7d37eb9cb5ce273 \
        sha1    d97fc6c8b902107addce59b4c59b9e0aaf613959

set macportsuser "root"

#   my_arch     my_tag      my_arch_version     my_distname_format              my_worksrcdir_format    weird_prefix
set my_arch_info "
    x86_64      intel       ${version}          instantclient-%s-macos.x64-%s  instantclient_%s        /ade/b/2649109290/oracle
"

if {"powerpc" == ${os.arch}} {
    universal_variant no
} else {
    variant universal {}
}

# merge() requires universal_archs to be set correctly. Since we use merge()
# even when not building universal we must always set universal_archs correctly.
if {[variant_exists universal] && [variant_isset universal]} {
    # The only supported universal build is x86_64 i386.
    configure.universal_archs x86_64 i386
} else {
    configure.universal_archs ${configure.build_arch}
}
set my_requested_archs ${configure.universal_archs}

distfiles
foreach my_requested_arch ${my_requested_archs} {
    foreach {my_arch my_tag my_arch_version my_distname_format my_worksrcdir_format weird_prefix} ${my_arch_info} {
        if {${my_arch} == ${my_requested_arch}} {
            foreach my_distfile_type {basic sdk sqlplus} {
                distfiles-append [suffix [format ${my_distname_format} ${my_distfile_type} ${my_arch_version}]]:${my_tag}
            }
        }
    }
}


post-fetch {
    set bad_distfiles {}
    foreach distfile ${distfiles} {
        set distfile [strsed ${distfile} {/:.*$//}]
        if {![catch {strsed [exec [findBinary file $portutil::autoconf::file_path] ${distpath}/${distfile} --brief --mime] {s/;.*$//}} mimetype] && "text/html" == ${mimetype}} {
            lappend bad_distfiles ${distfile}
            file delete ${distpath}/${distfile}
        }
    }
    if {[llength ${bad_distfiles}] > 0} {
        ui_error "MacPorts was not able to download the necessary distfiles for ${name}."
        ui_error "Please visit this URL:"
        ui_error ""
        ui_error "    ${homepage}"
        ui_error ""
        ui_error "and download these files manually:"
        ui_error ""
        foreach distfile ${bad_distfiles} {
            ui_error "    ${distfile}"
        }
        ui_error ""
        ui_error "and place them in this directory:"
        ui_error ""
        ui_error "    ${distpath}"
        return -code error "missing distfiles"
    }
}

extract {
    set my_build_dir ${extract.dir}/build
    xinstall -d ${my_build_dir}
    foreach my_requested_arch ${my_requested_archs} {
        foreach {my_arch my_tag my_arch_version my_distname_format my_worksrcdir_format weird_prefix} ${my_arch_info} {
            if {${my_arch} == ${my_requested_arch}} {
                foreach my_distfile_type {basic sdk sqlplus} {
                    system "${extract.cmd} ${extract.pre_args} ${extract.post_args} ${distpath}/[suffix [format ${my_distname_format} ${my_distfile_type} ${my_arch_version}]]"
                }
                move ${extract.dir}/[format ${my_worksrcdir_format} [join [lrange [split ${my_arch_version} .] 0 1] "_"]] ${my_build_dir}/${my_arch}
            }
        }
    }
}

use_configure  no

set lib_dir ${prefix}/lib/oracle

build {
    # The pre-built libraries use weird prefixes and Oracle recommends setting
    # DYLD_LIBRARY_PATH to deal with this. I would rather fix the paths in the
    # libraries at install time.
    foreach my_requested_arch ${my_requested_archs} {
        foreach {my_arch my_tag my_arch_version my_distname_format my_worksrcdir_format weird_prefix} ${my_arch_info} {
            if {${my_arch} == ${my_requested_arch}} {
                # For each dylib in the distribution, change the directory of its own
                # "soname" to ${lib_dir}.
                foreach lib [glob -directory ${workpath}/build/${my_arch} *{.dylib,sqlplus}*] {
                    # puts "--->  RUNNING: install_name_tool -id ${lib_dir}/[strsed ${lib} /^.*\\///] ${lib}"
                    system "install_name_tool -id ${lib_dir}/[strsed ${lib} /^.*\\///] ${lib}"
                    # Then for each dependent dylib with a weird path that this dylib
                    # references, fix the reference to use ${lib_dir}.
                    foreach dep [exec otool -L ${lib}] {
                        if [string match "${weird_prefix}/*" ${dep}] {
                            # puts "--->  RUNNING: install_name_tool -change ${dep} ${lib_dir}/[strsed ${dep} /^.*\\///] ${lib}"
                            system "install_name_tool -change ${dep} ${lib_dir}/[strsed ${dep} /^.*\\///] ${lib}"
                        }
                    }
                }
            }
        }
    }
}

destroot {
    foreach my_requested_arch ${my_requested_archs} {
        foreach {my_arch my_tag my_arch_version my_distname_format my_worksrcdir_format weird_prefix} ${my_arch_info} {
            if {${my_arch} == ${my_requested_arch}} {
                set my_destroot ${workpath}/pre-dest/${my_arch}
                set my_worksrcpath ${workpath}/build/${my_arch}
                xinstall -d ${my_destroot}${lib_dir}
                eval xinstall \
                    [glob -directory ${my_worksrcpath} *.dylib*] \
                    [glob -directory ${my_worksrcpath} *.jar] \
                    ${my_destroot}${lib_dir}
                
                # You would think the includes should go in ${prefix}/include/oracle, but
                # the "instantclient layout" dictates they must be in ${prefix}/lib/oracle/sdk/include;
                # ports like php5-oracle will expect them there.
                xinstall -d ${my_destroot}${lib_dir}/sdk
                copy ${my_worksrcpath}/sdk/include ${my_destroot}${lib_dir}/sdk
            }
        }
    }
    
    merge ${workpath}/pre-dest
    copy ${workpath}/build/${my_arch}/sqlplus ${destroot}${lib_dir}/sqlplus
    copy ${workpath}/build/${my_arch}/glogin.sql ${destroot}${lib_dir}/glogin.sql
    copy ${workpath}/build/${my_arch}/SQLPLUS_README ${destroot}${lib_dir}/SQLPLUS_README
    
    # php5-oracle complains without a libclntsh.dylib symlink.
    ln -s libclntsh.dylib.11.1 ${destroot}${lib_dir}/libclntsh.dylib
    
    # Add a libocci.dylib symlink too for good measure.
    ln -s libocci.dylib.11.1 ${destroot}${lib_dir}/libocci.dylib
}

notes "
To use ${name},
export DYLD_LIBRARY_PATH=${prefix}/lib/oracle
in your environment.

To use sqlplus
alias sqlplus=${prefix}/lib/oracle/sqlplus
"

livecheck.type          regex
livecheck.url           ${homepage}htdocs/intel_macsoft.html
livecheck.regex         instantclient-basic-macos.x64-(\[0-9.\]+)\\.zip
