# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 119412 2014-04-24 23:46:28Z ryandesign@macports.org $

PortSystem              1.0

name                    oracle-instantclient
categories              databases
platforms               macosx
maintainers             ryandesign
homepage                http://www.oracle.com/technetwork/database/features/instant-client/
use_zip                 yes

description \
    Oracle database connection libraries

long_description \
    Oracle Instant Client allows you to run your applications without installing the standard Oracle client or having an ORACLE_HOME.

version             11.2.0.4.0
set library_version 11.1
set macportsuser "root"
supported_archs     x86_64 i386
variant universal {}

master_sites            http://cdn.actionmoniker.com/macports

checksums \
    [suffix instantclient-basic-macos.x64-${version}] \
        md5     4bde8f7ac6185b2282a02881a42f7a67 \
        sha1    d9b5a1d13ecf2fca0317fc7b4964576a95990f08 \
    [suffix instantclient-sdk-macos.x64-${version}] \
        md5     4d45b0a38b0b3b26954156c80a5c2981 \
        sha1    1c37a37e62d02bad7705d7e417810da7fda9bd0e \
    [suffix instantclient-sqlplus-macos.x64-${version}] \
        md5     ea99aed62cade1e03b1a770c5ed205be \
        sha1    0ee3385f508d03136f8131672f38b636f0f9f274

set my_worksrcdir_format        instantclient_%s
set my_distname_format(i386)    instantclient-%s-macos.x32-${version}
set my_distname_format(x86_64)  instantclient-%s-macos.x64-${version}
set my_library_prefix(i386)     /ade
set my_library_prefix(x86_64)   /ade

if {${os.platform} eq "darwin" && ${os.major} < 9} {
    pre-fetch {
        ui_error "${name} on Intel requires Mac OS X 10.5 or greater."
        return -code error "incompatible Mac OS X version"
    }
}

livecheck.type          regex
livecheck.url           http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html
livecheck.regex         instantclient-basic-macos.x64-(\[0-9.\]+)${extract.suffix}

# merge() requires universal_archs to be set correctly. Since we use merge()
# even when not building universal we must always set universal_archs correctly.
if {![variant_exists universal] || ![variant_isset universal]} {
    configure.universal_archs ${configure.build_arch}
}

distfiles
foreach my_arch ${configure.universal_archs} {
    if {[info exists my_distname_format(${my_arch})]} {
        foreach my_distfile_type {basic sdk sqlplus} {
            distfiles-append [format $my_distname_format(${my_arch}) ${my_distfile_type}]${extract.suffix}
        }
    }
}

post-fetch {
    set bad_distfiles {}
    foreach distfile ${distfiles} {
        set distfile [strsed ${distfile} {/:.*$//}]
        if {![catch {strsed [exec [findBinary file $portutil::autoconf::file_path] ${distpath}/${distfile} --brief --mime] {s/;.*$//}} mimetype] && ${mimetype} eq "text/html"} {
            lappend bad_distfiles ${distfile}
            file delete ${distpath}/${distfile}
        }
    }
    if {[llength ${bad_distfiles}] > 0} {
        ui_error "MacPorts was not able to download the necessary distfiles for ${name}."
        ui_error "Please visit this URL:"
        ui_error ""
        ui_error "    ${homepage}"
        ui_error ""
        ui_error "and download these files manually:"
        ui_error ""
        foreach distfile ${bad_distfiles} {
            ui_error "    ${distfile}"
        }
        ui_error ""
        ui_error "and place them in this directory:"
        ui_error ""
        ui_error "    ${distpath}"
        return -code error "missing distfiles"
    }
}

extract {
    set my_build_dir ${extract.dir}/build
    xinstall -d ${my_build_dir}
    foreach my_arch ${configure.universal_archs} {
        foreach my_distfile_type {basic sdk sqlplus} {
            system "${extract.cmd} ${extract.pre_args} ${extract.post_args} ${distpath}/[format $my_distname_format(${my_arch}) ${my_distfile_type}]${extract.suffix}"
        }
        move ${extract.dir}/[format ${my_worksrcdir_format} [join [lrange [split ${version} .] 0 1] "_"]] ${my_build_dir}/${my_arch}
    }

    # Fix permissions.
    fs-traverse f ${my_build_dir} {
        if {[string match "*.dylib.*" ${f}]} {
            set ext .dylib
        } else {
            set ext [file extension ${f}]
        }
        switch ${ext} {
            .dylib -
            .jar {
                file attributes ${f} -permissions 0755
            }
            .h {
                file attributes ${f} -permissions 0644
            }
        }
    }
}

use_configure           no

set lib_dir             ${prefix}/lib/oracle

build {
    foreach my_arch ${configure.universal_archs} {
        # Oracle builds the libraries with strange install_names; fix them.
        # For each dylib, change the directory of its install_name to ${lib_dir}.
        foreach lib [glob -directory ${workpath}/build/${my_arch} *{.dylib}*] {
            # puts "--->  1) RUNNING: install_name_tool -id ${lib_dir}/[strsed ${lib} /^.*\\///] ${lib}"
            system "install_name_tool -id ${lib_dir}/[strsed ${lib} /^.*\\///] ${lib}"

            # Then for each dependent dylib with a strange install_name that
            # this dylib references, fix the reference to use ${lib_dir}.
            foreach dep [exec otool -L ${lib}] {
                # puts "--->  2) LIB: ${lib}"
                if [string match "$my_library_prefix(${my_arch})/*" ${dep}] {
                    # puts "--->  2) RUNNING: install_name_tool -change ${dep} ${lib_dir}/[strsed ${dep} /^.*\\///] ${lib}"
                    system "install_name_tool -change ${dep} ${lib_dir}/[strsed ${dep} /^.*\\///] ${lib}"
                }
            }

            # libociei is special: it's not linked to; it's dynamically loaded at
            # runtime by libclntsh. Oracle says you have to set DYLD_LIBRARY_PATH
            # to include ${lib_dir}, but adding an rpath works tooâ€”but rpath only
            # exists on Leopard and newer.
            if {${os.major} > 8 && [string match "*/libclntsh.dylib*" ${lib}]} {
                system "install_name_tool -add_rpath ${lib_dir} ${lib}"
            }
        }
        system "install_name_tool -id ${lib_dir}/sqlplus ${workpath}/build/${my_arch}/sqlplus"
        system "install_name_tool -change /ade/dosulliv_sqlplus_mac/oracle/sqlplus/lib/libsqlplus.dylib ${lib_dir}/libsqlplus.dylib ${workpath}/build/${my_arch}/sqlplus"
        system "install_name_tool -change /ade/b/2475221476/oracle/rdbms/lib/libclntsh.dylib.11.1 ${lib_dir}/libclntsh.dylib.11.1 ${workpath}/build/${my_arch}/sqlplus"
        system "install_name_tool -change /ade/b/2475221476/oracle/ldap/lib/libnnz11.dylib ${lib_dir}/libnnz11.dylib ${workpath}/build/${my_arch}/sqlplus"
    }
}

destroot {
    foreach my_arch ${configure.universal_archs} {
        set my_destroot ${workpath}/pre-dest/${my_arch}
        set my_worksrcpath ${workpath}/build/${my_arch}
        xinstall -d ${my_destroot}${lib_dir}
        eval xinstall \
            [glob -directory ${my_worksrcpath} *.dylib*] \
            [glob -directory ${my_worksrcpath} *.jar] \
            ${my_destroot}${lib_dir}

        # You would think the includes should go in ${prefix}/include/oracle, but
        # the "instantclient layout" dictates they must be in ${lib_dir}/sdk/include;
        # ports like php-oracle will expect them there.
        xinstall -d ${my_destroot}${lib_dir}/sdk
        copy ${my_worksrcpath}/sdk/include ${my_destroot}${lib_dir}/sdk
    }

    merge ${workpath}/pre-dest
    copy ${workpath}/build/${my_arch}/sqlplus ${destroot}${lib_dir}/sqlplus
    copy ${workpath}/build/${my_arch}/glogin.sql ${destroot}${lib_dir}/glogin.sql
    copy ${workpath}/build/${my_arch}/SQLPLUS_README ${destroot}${lib_dir}/SQLPLUS_README

    # php-oracle complains without a libclntsh.dylib symlink.
    ln -s libclntsh.dylib.${library_version} ${destroot}${lib_dir}/libclntsh.dylib

    # Add a libocci.dylib symlink too for good measure.
    ln -s libocci.dylib.${library_version} ${destroot}${lib_dir}/libocci.dylib
}

notes-append "
To use sqlplus
alias sqlplus=${prefix}/lib/oracle/sqlplus
"
